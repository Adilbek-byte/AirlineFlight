// <auto-generated />
using System;
using AirlineFlight.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirlineFlight.Migrations
{
    [DbContext(typeof(FlightDb))]
    partial class FlightDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirlineFlight.FlightClass", b =>
                {
                    b.ToTable("FlightClass");
                });

            modelBuilder.Entity("AirlineFlight.FlightEntity", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<string>("AviaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BonusId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("PriceOfTicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlightId");

                    b.HasIndex("BonusId");

                    b.HasIndex("DateId");

                    b.HasIndex("DirectionId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PriceOfTicketId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AirlineFlight.FlightSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Return")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleId");

                    b.ToTable("FlightSchedules");
                });

            modelBuilder.Entity("AirlineFlight.LocationPath", b =>
                {
                    b.Property<int>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathId"));

                    b.Property<string>("FromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToWhere")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PathId");

                    b.ToTable("LocationPaths");
                });

            modelBuilder.Entity("AirlineFlight.Models.Bonus", b =>
                {
                    b.Property<int>("BonusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BonusId"));

                    b.Property<bool>("FreeTaxi")
                        .HasColumnType("bit");

                    b.HasKey("BonusId");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("AirlineFlight.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerId"));

                    b.Property<int>("Adult")
                        .HasColumnType("int");

                    b.Property<int>("Child")
                        .HasColumnType("int");

                    b.Property<int>("TotalPeople")
                        .HasColumnType("int");

                    b.Property<string>("TotalSum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PassengerId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("AirlineFlight.WeatherForecast", b =>
                {
                    b.Property<int>("WeatherId")
                        .HasColumnType("int");

                    b.Property<string>("TemperatureC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weather")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeatherId");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("AirlineFlightl.TypeOfPrices", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"));

                    b.HasKey("PriceId");

                    b.ToTable("TypeOfPrices");
                });

            modelBuilder.Entity("AirlineFlight.FlightEntity", b =>
                {
                    b.HasOne("AirlineFlight.Models.Bonus", "Bonus")
                        .WithMany()
                        .HasForeignKey("BonusId");

                    b.HasOne("AirlineFlight.FlightSchedule", "Date")
                        .WithMany()
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineFlight.LocationPath", "Direction")
                        .WithMany()
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineFlight.Passenger", "Passengers")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineFlightl.TypeOfPrices", "PriceOfTicket")
                        .WithMany()
                        .HasForeignKey("PriceOfTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bonus");

                    b.Navigation("Date");

                    b.Navigation("Direction");

                    b.Navigation("Passengers");

                    b.Navigation("PriceOfTicket");
                });

            modelBuilder.Entity("AirlineFlight.WeatherForecast", b =>
                {
                    b.HasOne("AirlineFlight.FlightEntity", null)
                        .WithOne("Weather")
                        .HasForeignKey("AirlineFlight.WeatherForecast", "WeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirlineFlight.FlightEntity", b =>
                {
                    b.Navigation("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
